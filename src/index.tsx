import { router } from "common/router"
import ReactDOM from "react-dom/client"
import "./index.css"
import { Provider } from "react-redux"
import { RouterProvider } from "react-router-dom"
import { store } from "./app/store"

const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement)
root.render(
  <Provider store={store}>
    <RouterProvider router={router} />
  </Provider>,
)

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
// import React from "react";
// import ReactDOM from "react-dom/client";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";
//
// // Reducer
// const initState = {
//     animals: [
//         { likes: 0, name: "cat" },
//         { likes: 0, name: "dog" },
//         { likes: 0, name: "fish" },
//         { likes: 0, name: "spider" },
//         { likes: 0, name: "bird" },
//     ] as { likes: number; name: string }[],
// };
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     //debugger
//     switch (action.type) {
//         case "LIKE":
//             return {
//                 ...state,
//                 animals: state.animals.map((animal) => {
//                    // return true ? { ...animal } : animal;
//                    return animal.name===action.name? {...animal,likes:action.likes}: animal
//                 }),
//             };
//     }
//     return state;
// };
//
// // Store
// const rootReducer = combineReducers({ app: appReducer });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// const like = (likes: any, name: any) => ({ type: "LIKE", likes, name }) as const;
// type ActionsType = ReturnType<typeof like>;
//
// // Components
// export const Animals = () => {
//     const animals = useAppSelector((state) => state.app.animals);
//     const dispatch = useAppDispatch();
//     //dispatch(like(1 + 1, 'a.name'))
//     const mapped = animals.map((a: any, i: number) => (
//
//         <div key={i}>
//             {console.log(a.likes + 1,a.name)}
//          {a.name}-{a.likes}-<button onClick={() => dispatch(like(a.likes + 1, a.name))}>Like!</button>
//         </div>
//     ));
//
//     return <div>{mapped}</div>;
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//     <Provider store={store}>
//         <Animals />
//     </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö.
// –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ like –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø–æ—á–∏–Ω–∏—Ç—å –ª–∞–π–∫–∏.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏
//
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: -{a.likes + 1}-
// import React from 'react'
// import ReactDOM from 'react-dom/client';
//
// export const App = () => {
//     return (
//         <div>
//             <h2>–ö–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞ –≤—Ä–µ–º—è ¬´—Å–¥–∞—Ç—å –≤ –∞—Ä—Ö–∏–≤¬ª (–∏–ª–∏ –æ—Ç–ª–æ–∂–∏—Ç—å) –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –≤ —Ä–∞–±–æ—á–µ–π
//                 –∫–æ–ø–∏–∏, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Ö –ø–æ–∑–∂–µ? –û—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å
//                 –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≤—ã –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤—ã –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–º–º–∏—Ç–∞.</h2>
//         </div>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ö–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞ –≤—Ä–µ–º—è ¬´—Å–¥–∞—Ç—å –≤ –∞—Ä—Ö–∏–≤¬ª (–∏–ª–∏ –æ—Ç–ª–æ–∂–∏—Ç—å) –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –≤ —Ä–∞–±–æ—á–µ–π
// –∫–æ–ø–∏–∏, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Ö –ø–æ–∑–∂–µ? –û—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å
// –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≤—ã –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤—ã –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–º–º–∏—Ç–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: git init
// import React from 'react'
// import ReactDOM from 'react-dom/client';
//
// export const App = () => {
//     return (
//         <div>
//             <h2>–ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è master –æ—Ç origin master ?</h2>
//             <ul>
//                 <li>1 - –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ 2 –≤–µ—Ç–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏. –ò—Ö –Ω–∏—á–µ–≥–æ –Ω–µ —Å–≤—è–∑—ã–≤–∞–µ—Ç</li>
//                 <li>2 - master –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é, origin master - —É–¥–∞–ª–µ–Ω–Ω–æ–º—É</li>
//                 <li>3 - –≠—Ç–æ 2 –Ω–∞–∑–≤–∞–Ω–∏—è –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –≤–µ—Ç–∫–∏. –ü—Ä–∏—Å—Ç–∞–≤–∫–∞ origin –Ω–µ –Ω–µ—Å–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ —Å–º—ã—Å–ª–∞.</li>
//                 <li>4 - –í–µ—Ç–∫–∏ origin master –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</li>
//                 <li>5 - –ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</li>
//             </ul>
//         </div>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è master –æ—Ç origin master ?
// –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ (–æ—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).
// ‚ùó –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –≤–µ—Ä–Ω—ã–π, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏.
// –ï—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç (1),
// –∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ —É–∫–∞–∑–∞—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1 –∏ 2), —Ç–æ –æ—Ç–≤–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 2

// import React from "react";
// import ReactDOM from "react-dom/client";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";
//
// // Reducer
// const initState = {
//     work: 0,
//     donate: 0,
//     balance: 0,
// };
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case "CHANGE_VALUE":
//             return {
//                 ...state,
//                 ...action.payload,
//             };
//         default:
//             return state;
//     }
// };
//
// // Store
// const rootReducer = combineReducers({ app: appReducer });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// const changeValue = (payload: any) => ({ type: "CHANGE_VALUE", payload }) as const;
// type ActionsType = ReturnType<typeof changeValue>;
//
// // Components
// export const Income = () => {
//     const work = useAppSelector((state) => state.app.work);
//     const donate = useAppSelector((state) => state.app.donate);
//     const balance = useAppSelector((state) => state.app.balance);
//
//     const dispatch = useAppDispatch();
//
//     return (
//         <div>
//             <div>
//                 work:{" "}
//                 <input
//                     value={work}
//                     type={"number"}
//                     onChange={(e) => dispatch(changeValue({ work: +e.target.value }))}
//                 />
//             </div>
//             <div>
//                 donate:{" "}
//                 <input
//                     value={donate}
//                     type={"number"}
//                     onChange={(e) => dispatch(changeValue({ donate: +e.target.value }))}
//                 />
//             </div>
//
//             <h1>üíµ balance: {balance}</h1>
//             <button
//                 onClick={() => {
//                     // ‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó
//                    // balance=balance+1
//                    dispatch(changeValue({balance:work+donate}))
//                 }}
//             >
//                 calculate balance
//             </button>
//         </div>
//     );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//     <Provider store={store}>
//         <Income />
//     </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã –≤—ã–≤–µ–ª–∞—Å—å —Å—É–º–º–∞ –¥–æ—Ö–æ–¥–∞ –≤ —Å—Ç—Ä–æ–∫–µ –±–∞–ª–∞–Ω—Å–∞
//
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: console.log(work + donate)
//
// import React, { useState } from "react";
// import ReactDOM from "react-dom/client";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";
// import {log} from "util";
//
// // Styles
// const modal: React.CSSProperties = {
//     position: "fixed",
//     zIndex: 1,
//     left: 0,
//     top: 0,
//     width: "100%",
//     height: "100%",
//     overflow: "auto",
//     backgroundColor: "rgba(23,26,38,0.26)",
// };
//
// const modalContent: React.CSSProperties = {
//     backgroundColor: "#fefefe",
//     margin: "15% auto",
//     padding: "20px",
//     border: "1px solid #888",
//     width: "80%",
// };
//
// // Reducer
// const initState = { tasks: [] as any[] };
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case "ADD_TASK":
//             return {
//                 ...state,
//                 tasks: [action.task, ...state.tasks],
//             };
//         case "CHANGE_TASK":
//             return {
//                 ...state,
//                 tasks: [action.task, ...state.tasks.filter((t: any) => t.id !== action.task.id)],
//             };
//         default:
//             return state;
//     }
// };
//
// // Store
// const rootReducer = combineReducers({ app: appReducer });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// const addTask = (task: any) => ({ type: "ADD_TASK", task }) as const;
// const changeTask = (task: any) => ({ type: "CHANGE_TASK", task }) as const;
// type ActionsType = ReturnType<typeof addTask> | ReturnType<typeof changeTask>;
//
// // Components
// const Modal = (props: any) => {
//     const [value, setValue] = useState(props.task?.name || '');
//     console.log(props)
//     return (
//         <div style={modalContent}>
//             modal:csacsa
//             <input value={value===''? 'scscasc': 'aaaaa'}  onChange={(e) => setValue(e.target.value)} />cascsa
//             <button onClick={() =>{
//                 //console.log(value+props.title)
//                 return props.callback(value)
//             }}>{props.title}</button>
//         </div>
//     );
// };
//
// const Task = (props: any) => {
//     const [show, setShow] = useState(false);
//
//     return (
//         <div>
//             {props.task.name}
//
//             <button onClick={() => setShow(true)}>change</button>
//             {show && (
//                 <Modal
//                     callback={(value: string) => {
//                         console.log(props.task.name)
//                         props.change(value);
//                         setShow(false);
//                     }}
//                     title={"change"}
//                 />
//             )}
//         </div>
//     );
// };
//
// export const Todolist = () => {
//     const tasks = useAppSelector((state) => state.app.tasks);
//     const dispatch = useAppDispatch();
//     const [show, setShow] = useState(false);
//
//     const getId = () => tasks.reduce((acc: number, t: any) => (acc > t.id ? acc : t.id), 0) + 1;
//
//     const mapped = tasks.map((t: any) => (
//         <Task
//             key={t.id}
//             task={t}
//             change={(value: string) => dispatch(changeTask({ id: t.id, name: value }))}
//         />
//     ));
//
//     return (
//         <div style={modal}>
//             <button onClick={() => setShow(true)}>open modal</button>
//             {show && (
//                 <Modal
//                     callback={(value: string) => {
//                         dispatch(addTask({ id: getId(), name: value }));
//                         setShow(false);
//                     }}
//                     title={"add"}
//                 />
//             )}
//             {mapped}
//         </div>
//     );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//     <Provider store={store}>
//         <Todolist />
//     </Provider>,
// );

// üìú–û–ø–∏—Å–∞–Ω–∏–µ:
// –û—Ç–∫—Ä–æ–π—Ç–µ –º–æ–¥–∞–ª–∫—É –∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Ç–µ–∫—Å—Ç.
// –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç.
// –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞—Å–∫–∏ –≤ –∏–Ω–ø—É—Ç–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø–æ—á–∏–Ω–∏—Ç—å —ç—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
//
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å,
// —á—Ç–æ–±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
//
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: defaultValue={value}
//
// import ReactDOM from "react-dom/client";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import React, { useEffect } from "react";
// import axios from "axios";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";
//
// // Styles
// const table: React.CSSProperties = {
//     borderCollapse: "collapse",
//     width: "100%",
//     tableLayout: "fixed",
// };
//
// const th: React.CSSProperties = {
//     padding: "10px",
//     border: "1px solid black",
//     background: "lightgray",
//     cursor: "pointer",
// };
//
// const td: React.CSSProperties = {
//     padding: "10px",
//     border: "1px solid black",
// };
//
// // Types
// type UserType = {
//     id: string;
//     name: string;
//     age: number;
// };
//
// type UsersResponseType = {
//     items: UserType[];
//     totalCount: number;
// };
//
// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });
//
// const api = {
//     getUsers() {
//         return instance.get<UsersResponseType>("users");
//     },
// };
//
// // Reducer
// const initState = {
//     users: [] as UserType[],
// };
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case "SET_USERS":
//             return { ...state, users: action.users };
//         default:
//             return state;
//     }
// };
//
// // Store
// const rootReducer = combineReducers({ app: appReducer });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// const setUsersAC = (users: UserType[]) => ({ type: "SET_USERS", users });
// type ActionsType = ReturnType<typeof setUsersAC>;
//
// // Thunk
// const getUsersTC = (): AppThunk => (dispatch, getState) => {
//     api.getUsers().then((res) => {
//         console.log(res.data.items)
//         dispatch(setUsersAC(res.data.items))
//     });
// };
//
// // Components
// export const Users = () => {
//     const users = useAppSelector((state) => state.app.users);
//
//     const dispatch = useAppDispatch();
//
//     useEffect(() => {
//         dispatch(getUsersTC());
//     }, []);
//
//     return (
//         <div>
//             <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//             <table style={table}>
//                 <thead>
//                 <tr>
//                     <th style={th}> Name</th>
//                     <th style={th}> Age</th>
//                 </tr>
//                 </thead>
//                 <tbody>
//                 {users.map((u) => (
//                     <tr key={u.id}>
//                         <td style={td}>{u.name}</td>
//                         <td style={td}>{u.age}</td>
//                     </tr>
//                 ))}
//                 </tbody>
//             </table>
//         </div>
//     );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//     <Provider store={store}>
//         <Users />
//     </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ –ø—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å, —Ç.–∫. –≤ –∫–æ–¥–µ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–π—Ç–∏ –±–∞–≥—É, —á—Ç–æ–±—ã —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∞—Å—å.
// –í –∫–∞—á–µ—Å—Ç–≤–µ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞
// ‚ùó –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ—à–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏, –≤ –æ—Ç–≤–µ—Ç–∞—Ö —É—á—Ç–µ–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {users.map(u)=> —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç—Ä–∏—Å—É–π—Å—è –í–ñ–£–• –í–ñ–£–•}
// import ReactDOM from "react-dom/client";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import React, { useEffect } from "react";
// import axios from "axios";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";
//
// // Styles
// const table: React.CSSProperties = {
//     borderCollapse: "collapse",
//     width: "100%",
//     tableLayout: "fixed",
// };
//
// const th: React.CSSProperties = {
//     padding: "10px",
//     border: "1px solid black",
//     background: "lightgray",
//     cursor: "pointer",
// };
//
// const td: React.CSSProperties = {
//     padding: "10px",
//     border: "1px solid black",
// };
//
// // Types
// type UserType = {
//     id: string;
//     name: string;
//     age: number;
// };
//
// type UsersResponseType = {
//     items: UserType[];
//     totalCount: number;
// };
//
// type ParamsType = {
//     sortBy: string | null;
//     sortDirection: "asc" | "desc" | null;
// };
//
// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });
//
// const api = {
//     getUsers(params?: ParamsType) {
//         return instance.get<UsersResponseType>("users", { params });
//     },
// };
//
// // Reducer
// const initState = {
//     users: [] as UserType[],
//     params: {
//         sortBy: null,
//         sortDirection: "asc",
//     } as ParamsType,
// };
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case "SET_USERS":
//             return { ...state, users: action.users };
//         case "SET_PARAMS":
//             return { ...state, params: { ...state.params, ...action.payload } };
//         default:
//             return state;
//     }
// };
//
// // Store
// const rootReducer = combineReducers({ app: appReducer });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// const setUsersAC = (users: UserType[]) => ({ type: "SET_USERS", users }) as const;
// const setParamsAC = (payload: ParamsType) => ({ type: "SET_PARAMS", payload }) as const;
// type ActionsType = ReturnType<typeof setUsersAC> | ReturnType<typeof setParamsAC>;
//
// // Thunk
// const getUsersTC = (): AppThunk => (dispatch, getState) => {
//     const params = getState().app.params;
//     api
//         .getUsers(params.sortBy ? params : undefined)
//         .then((res) => dispatch(setUsersAC(res.data.items)));
// };
//
// export const Users = () => {
//     const users = useAppSelector((state) => state.app.users);
//     const sortBy = useAppSelector((state) => state.app.params.sortBy);
//     const sortDirection = useAppSelector((state) => state.app.params.sortDirection);
//     //console.log(users, sortBy, sortDirection);
//     const dispatch = useAppDispatch();
//
//     // ‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó
//     useEffect(() => {
//         //dispatch(sortBy ? getUsersTC(sortDirection) : getUsersTC());
//         dispatch( getUsersTC());
//         console.log(sortBy)
//         console.log(sortDirection)
//         },[sortBy, sortDirection]);
//
//     const sortHandler = (name: string) => {
//         const direction = sortDirection === "asc" ? "desc" : "asc";
//         dispatch(setParamsAC({ sortBy: name, sortDirection: direction }));
//     };
//
//     return (
//         <div>
//             <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//             <table style={table}>
//                 <thead>
//                 <tr>
//                     <th style={th} onClick={() => sortHandler("name")}>
//                         Name
//                     </th>
//                     <th style={th} onClick={() => sortHandler("age")}>
//                         Age
//                     </th>
//                 </tr>
//                 </thead>
//                 <tbody>
//                 {users.map((u) => {
//                     return (
//                         <tr key={u.id}>
//                             <td style={td}>{u.name}</td>
//                             <td style={td}>{u.age}</td>
//                         </tr>
//                     );
//                 })}
//                 </tbody>
//             </table>
//         </div>
//     );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//     <Provider store={store}>
//         <Users />
//     </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –ù–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX, —á—Ç–æ–±—ã:
// 1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å
// 2) –ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ –≤–æ–∑—Ä–∞—Å—Ç—É
// 3) –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω–æ –∏ —Ç–æ–∂–µ –ø–æ–ª–µ 2 —Ä–∞–∑–∞)

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: console.log(users, sortBy, sortDirection)
// import ReactDOM from "react-dom/client";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import React, { useState } from "react";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";
//
// // Styles
// const modal: React.CSSProperties = {
//     position: "fixed",
//     zIndex: 1,
//     left: 0,
//     top: 0,
//     width: "100%",
//     height: "100%",
//     overflow: "auto",
//     backgroundColor: "rgba(23,26,38,0.26)",
// };
//
// const modalContent: React.CSSProperties = {
//     backgroundColor: "#fefefe",
//     margin: "15% auto",
//     padding: "20px",
//     border: "1px solid #888",
//     width: "80%",
// };
//
// // Reducer
// const initState = { goodThings: [] as any[] };
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case "LIKE":
//             return {
//                 ...state,
//                 goodThings: [action.thing, ...state.goodThings],
//             };
//     }
//     return state;
// };
//
// // Store
// const rootReducer = combineReducers({ app: appReducer });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// const addThing = (thing: any) => ({ type: "LIKE", thing }) as const;
// type ActionsType = ReturnType<typeof addThing>;
//
// const Modal = (props: any) => {
//     return (
//         <div style={modalContent}>
//             modal:
//             <input value={props.value} onChange={(e) => props.setValue(e.target.value)} />
//             <button onClick={props.add}>add</button>xaxa
//         </div>
//     );
// };
//
// // Components
// export const Animals = () => {
//     const goodThings = useAppSelector((state) => state.app.goodThings);
//     const dispatch = useAppDispatch();
//
//     const [value, setValue] = useState("");
//     const [show, setShow] = useState(false);
//
//     const mapped = goodThings.map((t: any, i: number) => <div key={i}>{t}</div>);
//
//     return (
//         <div style={modal}>
//             <button onClick={() => setShow(true)}>show modal</button>xaxa
//
//             {show && (
//                 <Modal
//                     value={value}
//                     setValue={setValue}
//                     add={() => {
//                         dispatch(addThing(value));
//                         setValue("");
//                         setShow(false);//////
//                     }}
//
//                 />
//             )}
//
//             {mapped }
//         </div>
//     );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//     <Provider store={store}>
//         <Animals />
//     </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –û—Ç–∫—Ä–æ–π—Ç–µ –º–æ–¥–∞–ª–∫—É, –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ add.
// –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è —Å–Ω–∏–∑—É, –Ω–æ –º–æ–¥–∞–ª–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø–æ –ø—Ä–µ–∂–Ω–µ–º—É –≤–∏–¥–∏–º–æ–π.

// ü™õ –ó–∞–¥–∞—á–∞:
// –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –º–æ–¥–∞–ª–∫–∞ –ø—Ä—è—Ç–∞–ª–∞—Å—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ–¥—É, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: closeModal(true)
